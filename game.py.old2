#!/usr/bin/env python

import pygame
import math
#import pygame as pygame

WINSIZE = [640, 480]
white = 255, 240, 200
black = 20, 20, 40
red =   (255,   0,   0)

def range(baddie, turret):
  return math.sqrt( (baddie[0] - turret[0])**2 +(baddie[1] - turret[1])**2 )

def angle(baddie,turret):
  return math.atan2((turret[0] - baddie[0]),(turret[1] - baddie[1]))

class turret(pygame.sprite.Sprite):
  # Constructor
  def __init__(self,position,ammo,range,damage):
    # Call the parent class (Sprite) constructor
    pygame.sprite.Sprite.__init__(self)  

    self.position = position
    self.radius = 100 # shoot range - circle collision detection
    self.ammo = ammo
    self.damage = damage
    self.range = range
    self.angle = math.pi*(2/3)
    self.shootAngle = math.pi/8

    self.image = pygame.Surface((30,30))
    self.image.fill(white)
    # Fetch the rectangle object that has the dimensions of the image
    # Update the position of this object by setting the values of rect.x and rect.y
    self.rect = self.image.get_rect()
    self.rect.center = position

  def shoot(self,baddie,line_list):
    if self.ammo > 0:
      self.ammo-=1
      print("shoot!")
      baddie.health -= self.damage
      line_list.append(line(red,self.rect.center,baddie.rect.center))
      if baddie.health <= 0:
        pygame.sprite.RenderPlain.remove(baddie)
        print("Remove baddie")
    else:
      print("Out of ammo")

class baddie(pygame.sprite.Sprite):
  def __init__(self, health,position):
    pygame.sprite.Sprite.__init__(self)  

    self.health = health
    self.position = position

    self.image = pygame.Surface((10,10))
    self.image.fill(white)
    self.radius = 10 # range - circle collision detection
    self.rect = self.image.get_rect()
    self.rect.center = position

def checkFireTargets(baddie_list, turret_list, line_list):
  #loop through targets for each turret and check if in range
  for baddie in baddie_list:
    for turret in turret_list:
      if range(baddie.position, turret.position) <= turret.range:
        # if abs(angle(baddie.position, turret.position)) - turret.angle <= 0.2:
        # + 0.000001*turret.range:
          print(abs(angle(baddie.position, turret.position)))
          turret.shoot(baddie, line_list)
          print("Shooting baddie!")
          print("baddie health :" + str(baddie.health))

# change for sprite group
def checkDead(baddie_list):
  for baddie in baddie_list:
    if baddie.health <= 0:
      baddie_list.remove(baddie)
      print("baddie died")
# def fireOnTargets(baddie_inRange_list,turret_list):
#   for baddie in baddie_inRange_list:
#     baddie.health -= 5

class line:
  def __init__(self,colour, start, end):
    self.colour = colour
    self.start = start
    self.end = end

  # def draw(self, surface):
  #   pygame.draw.line(surface,self.colour,self.start,self.end)

class RenderLines:
  def __init__(self):
    self.lines_list = []
  def storelines(self,line_list):
    self.lines_list = line_list
  def draw(self, surface):
    for line in self.lines_list:
      pygame.draw.line(surface,line.colour,line.start,line.end)

class Events:
  def __init__(self):
    done = 0
  # def eventCheck:
  #   if mousepressed:
  #     createBaddie
  def spawnBaddie(self,spritesGroup):
    ran_pos = (150,250)
    health = 2
    
    spritesGroup.add(baddie(health,ran_pos))

  def mousePress(self):
    for event in pygame.event.get():
      if event.type == pygame.QUIT or (event.type == pygame.KEYUP and event.key == pygame.K_ESCAPE):
        self.done = 1
        break
        
      mouse_buttons = pygame.mouse.get_pressed()
      if mouse_buttons[0] is True:
        print("mouse button 1 pressed")
        self.spawnBaddie(self,


def main():
  screen = pygame.display.set_mode(WINSIZE)
  pygame.display.set_caption("black")
  screen.fill(black)
  clock = pygame.time.Clock()

  baddie_list = []
  turret_list = []
  line_list = []
  # baddie = baddie(1,(300,300))
  baddie_list.append( baddie(1,(300,300)) )
  baddie_list.append( baddie(2,(200,300)) )
  baddie_list.append( baddie(2,(175,200)) )
  baddie_list.append( baddie(2,(50,75)) )
  baddie_list.append( baddie(2,(100,50)) )
  # turret = turret((200,200),5,10,2)
  turret_list.append( turret((100,100),5,300,2) )

  baddiesprites = pygame.sprite.Group(baddie_list)
  turretsprites = pygame.sprite.Group(turret_list)
  # allsprites = pygame.sprite.RenderPlain(baddie_list,turret_list)
  allsprites = pygame.sprite.RenderPlain(baddiesprites,turretsprites)

  # Check targets and shoot!
  hit_dict = pygame.sprite.groupcollide(turretsprites,baddiesprites, False, False, pygame.sprite.collide_circle)
  for turretKey in hit_dict:
    for baddieValue in hit_dict[turretKey]:
      turretKey.shoot(baddieValue,line_list)
  # print(pygame.sprite.spritecollide(turret_list[0],baddiesprites, False, pygame.sprite.collide_circle))

  # allsprites.remove(baddie_list[0])
  events = Events()
  # events.spawnBaddie(allsprites)

  # print(allsprites.sprites())
  # checkFireTargets(allsprites.sprites(), turret_list, line_list)
  alllines = RenderLines()
  alllines.storelines(line_list)



  # main game loop
  done = 0
  # x=0
  while not done:
    # x+=10
    # pygame.draw.line(screen, white, (0,0), (640,x))

    pygame.display.update()
    events.mousePress(done)

    # screen.blit(background, (0, 0))
    screen.fill(black)
    allsprites.draw(screen)
    alllines.draw(screen)

    # for line in line_list:
    #   line.draw(screen)
    clock.tick(60)
  pygame.quit()


# if python says run, then we should run
if __name__ == "__main__":
  main()
#     
