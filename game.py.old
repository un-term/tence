#!/usr/bin/env python

import pygame
import math
import random
#import pygame as pygame

WINSIZE = [640, 480]
white = (255, 240, 200)
black = (20, 20, 40)
red =   (255,   0,   0)
BLUE = (0,0,255)
DEEPSKYBLUE = (0,191,255)

# class Turret(pygame.sprite.Sprite):
#     self.position = position

class Turret(pygame.sprite.Sprite):
  # Constructor
  def __init__(self,position,ammo,range,damage):
    # Call the parent class (Sprite) constructor
    pygame.sprite.Sprite.__init__(self)  

    self.position = position
    self.radius = 100 # shoot range - circle collision detection
    self.ammo = ammo
    self.damage = damage
    self.head_angle = 0
    self.angle_speed = 5 # degree/frame

    self.image = pygame.Surface((30,30))
    self.image.fill(DEEPSKYBLUE)
    # Fetch the rectangle object that has the dimensions of the image
    # Update the position of this object by setting the values of rect.x and rect.y
    self.rect = self.image.get_rect()
    self.rect.center = position

    # turret head
    # self.image_head = pygame.Surface((5,30))
    # self.image_head.fill(BLUE)
    # self.rect_head = self.image_head.get_rect()
    # self.rect_head.center = position + (0,15) 
    
 
  # def rotate(self

  def shoot(self,baddie,line_list):
    if self.ammo > 0:
      #create rect along firing line
      # self.ammo-=1 #CHANGE - commented to testing
      # print("shoot!")
      baddie.health -= self.damage
      line_list.append(Line(red,self.rect.center,baddie.rect.center)) #CHANGE - remove dead baddie from lists
      # CHANGE - add laser list to each turret object
    # else:
      # print("Out of ammo")

class Baddie(pygame.sprite.Sprite):
  def __init__(self, health,position):
    pygame.sprite.Sprite.__init__(self)  

    self.health = health
    self.position = position

    self.image = pygame.Surface((10,10))
    self.image.fill(white)
    self.radius = 10 # range - circle collision detection
    self.rect = self.image.get_rect()
    self.rect.center = position

class Line:
  def __init__(self,colour, start, end):
    self.colour = colour
    self.start = start
    self.end = end

  # def draw(self, surface):
  #   pygame.draw.line(surface,self.colour,self.start,self.end)

class RenderLines:
  def __init__(self):
    self.lines_list = []
  def storelines(self,line_list):
    self.lines_list = line_list
  def draw(self, surface):
    for line in self.lines_list:
      pygame.draw.line(surface,line.colour,line.start,line.end)

class Events:
  def __init__(self):
    self.done = 0
    self.create = 0
  # def eventCheck:
  #   if mousepressed:
  #     createBaddie
       
  def spawn_baddie(self,sprites_group_list):
    mouse_pos = pygame.mouse.get_pos()
    # x = random.randrange(0,300,1)
    # y = random.randrange(0,300,1)
    # ran_pos = (x,y)
    health = 2
    for group in sprites_group_list:
      group.add(Baddie(health,mouse_pos))
      print("add baddie to groups")
    
  def mouse_press(self):
    for event in pygame.event.get():
      if event.type == pygame.QUIT or (event.type == pygame.KEYUP and event.key == pygame.K_ESCAPE):
        self.done = 1
        break
        
      mouse_buttons = pygame.mouse.get_pressed()
      if mouse_buttons[0] is True:
        print("mouse button 1 pressed")
        self.create = 1


def main():
  screen = pygame.display.set_mode(WINSIZE)
  pygame.display.set_caption("black")
  screen.fill(black)
  clock = pygame.time.Clock()

  baddie_list = []
  turret_list = []
  line_list = []
  # baddie = baddie(1,(300,300))
  baddie_list.append( Baddie(1,(300,300)) )
  baddie_list.append( Baddie(2,(200,300)) )
  baddie_list.append( Baddie(2,(175,200)) )
  baddie_list.append( Baddie(2,(50,75)) )
  baddie_list.append( Baddie(2,(100,50)) )
  turret_list.append( Turret((100,100),5,300,2) )

  baddiesprites = pygame.sprite.Group(baddie_list)
  turretsprites = pygame.sprite.Group(turret_list)
  # allsprites = pygame.sprite.RenderPlain(baddie_list,turret_list)
  allsprites = pygame.sprite.RenderPlain(baddiesprites,turretsprites)

  # print(pygame.sprite.spritecollide(turret_list[0],baddiesprites, False, pygame.sprite.collide_circle))

  # allsprites.remove(baddie_list[0])
  events = Events()
  # events.spawnBaddie(allsprites)
  # checkFireTargets(allsprites.sprites(), turret_list, line_list)
  alllines = RenderLines()
  alllines.storelines(line_list)



  # main game loop
  events.done = 0
  while not events.done:

    pygame.display.update()

    # Check targets and shoot!
    hit_dict = pygame.sprite.groupcollide(turretsprites,baddiesprites, False, False, pygame.sprite.collide_circle)
    for turretKey in hit_dict:
      for baddieValue in hit_dict[turretKey]:
        turretKey.shoot(baddieValue,line_list)


    events.mouse_press()
    if events.create:
      print("Trying to create baddie")
      events.spawn_baddie([allsprites,baddiesprites])
      events.create = 0

    # screen.blit(background, (0, 0))
    screen.fill(black)
    allsprites.draw(screen)
    alllines.draw(screen)

    # for line in line_list:
    #   line.draw(screen)
    clock.tick(60)
  pygame.quit()


# if python says run, then we should run
if __name__ == "__main__":
  main()
#     
